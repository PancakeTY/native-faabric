// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: faabric

#include "faabric_generated.h"
#include "faabric.grpc.fb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

static const char* SnapshotService_method_names[] = {
  "/SnapshotService/PushSnapshot",
};

std::unique_ptr< SnapshotService::Stub> SnapshotService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SnapshotService::Stub> stub(new SnapshotService::Stub(channel));
  return stub;
}

SnapshotService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_PushSnapshot_(SnapshotService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}
  
::grpc::Status SnapshotService::Stub::PushSnapshot(::grpc::ClientContext* context, const flatbuffers::grpc::Message<SnapshotPushRequest>& request, flatbuffers::grpc::Message<SnapshotPushResponse>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PushSnapshot_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<SnapshotPushResponse>>* SnapshotService::Stub::AsyncPushSnapshotRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<SnapshotPushRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<SnapshotPushResponse>>::Create(channel_.get(), cq, rpcmethod_PushSnapshot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<SnapshotPushResponse>>* SnapshotService::Stub::PrepareAsyncPushSnapshotRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<SnapshotPushRequest>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<SnapshotPushResponse>>::Create(channel_.get(), cq, rpcmethod_PushSnapshot_, context, request, false);
}

SnapshotService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SnapshotService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SnapshotService::Service, flatbuffers::grpc::Message<SnapshotPushRequest>, flatbuffers::grpc::Message<SnapshotPushResponse>>(
          std::mem_fn(&SnapshotService::Service::PushSnapshot), this)));
}

SnapshotService::Service::~Service() {
}

::grpc::Status SnapshotService::Service::PushSnapshot(::grpc::ServerContext* context, const flatbuffers::grpc::Message<SnapshotPushRequest>* request, flatbuffers::grpc::Message<SnapshotPushResponse>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


