// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FAABRIC_H_
#define FLATBUFFERS_GENERATED_FAABRIC_H_

#include "flatbuffers/flatbuffers.h"

struct SnapshotPushRequest;
struct SnapshotPushRequestBuilder;

struct SnapshotPushResponse;
struct SnapshotPushResponseBuilder;

struct SnapshotPushRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SnapshotPushRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_CONTENTS = 6
  };
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  const flatbuffers::Vector<int8_t> *contents() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_CONTENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_CONTENTS) &&
           verifier.VerifyVector(contents()) &&
           verifier.EndTable();
  }
};

struct SnapshotPushRequestBuilder {
  typedef SnapshotPushRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(SnapshotPushRequest::VT_KEY, key);
  }
  void add_contents(flatbuffers::Offset<flatbuffers::Vector<int8_t>> contents) {
    fbb_.AddOffset(SnapshotPushRequest::VT_CONTENTS, contents);
  }
  explicit SnapshotPushRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SnapshotPushRequestBuilder &operator=(const SnapshotPushRequestBuilder &);
  flatbuffers::Offset<SnapshotPushRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SnapshotPushRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<SnapshotPushRequest> CreateSnapshotPushRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> contents = 0) {
  SnapshotPushRequestBuilder builder_(_fbb);
  builder_.add_contents(contents);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<SnapshotPushRequest> CreateSnapshotPushRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const std::vector<int8_t> *contents = nullptr) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto contents__ = contents ? _fbb.CreateVector<int8_t>(*contents) : 0;
  return CreateSnapshotPushRequest(
      _fbb,
      key__,
      contents__);
}

struct SnapshotPushResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SnapshotPushResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE = 4
  };
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct SnapshotPushResponseBuilder {
  typedef SnapshotPushResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(SnapshotPushResponse::VT_MESSAGE, message);
  }
  explicit SnapshotPushResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SnapshotPushResponseBuilder &operator=(const SnapshotPushResponseBuilder &);
  flatbuffers::Offset<SnapshotPushResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SnapshotPushResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<SnapshotPushResponse> CreateSnapshotPushResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  SnapshotPushResponseBuilder builder_(_fbb);
  builder_.add_message(message);
  return builder_.Finish();
}

inline flatbuffers::Offset<SnapshotPushResponse> CreateSnapshotPushResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return CreateSnapshotPushResponse(
      _fbb,
      message__);
}

#endif  // FLATBUFFERS_GENERATED_FAABRIC_H_
